tosca_definitions_version: cloudify_dsl_1_3

inputs:

  use_existing_haproxy_aws_virtual_machine:
    type: boolean
    default: false

  haproxy_aws_virtual_machine:
    type: string
    default: ''

  haproxy_aws_virtual_machine_image_id:
    default: ami-c8580bdf

  haproxy_aws_virtual_machine_instance_type:
    default: m3.medium

  use_existing_mongodb_aws_virtual_machine:
    type: boolean
    default: false

  mongodb_aws_virtual_machine:
    type: string
    default: ''

  mongodb_aws_virtual_machine_image_id:
    default: ami-c8580bdf

  mongodb_aws_virtual_machine_instance_type:
    default: m3.medium

  use_existing_nodejs_aws_virtual_machine:
    type: boolean
    default: false

  nodejs_aws_virtual_machine:
    type: string
    default: ''

  nodejs_aws_virtual_machine_image_id:
    default: ami-c8580bdf

  nodejs_aws_virtual_machine_instance_type:
    default: m3.medium

  haproxy_aws_instances:
    required: true

  mongodb_aws_instances:
    required: true

  nodejs_aws_instances:
    required: true

  aws_agent_username:
    default: ubuntu

  aws_agent_local_path_to_key_file:
    default: { get_input: example_aws_key_file }

  aws_agent_port:
    default: 22

node_templates:

  haproxy_aws_virtual_machine:
    type: cloudify.aws.nodes.Instance
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: haproxy_aws_instances }
    properties:
      aws_config: { get_input: aws_configuration }
      agent_config:
        install_method: none
        user: { get_input: aws_agent_username }
        key: { get_input: aws_agent_local_path_to_key_file }
        port: { get_input: aws_agent_port }
      use_external_resource: { get_input: use_existing_haproxy_aws_virtual_machine }
      resource_id: { get_input: haproxy_aws_virtual_machine }
      image_id: { get_input: haproxy_aws_virtual_machine_image_id }
      instance_type: { get_input: haproxy_aws_virtual_machine_instance_type }
      parameters:
        placement: { get_property: [ example_aws_public_subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: example_aws_public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: aws_haproxy_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: example_aws_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: example_aws_key
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: aws_haproxy_ip

  mongodb_aws_virtual_machine:
    type: cloudify.aws.nodes.Instance
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: mongodb_aws_instances }
    properties:
      aws_config: { get_input: aws_configuration }
      agent_config:
        install_method: none
        user: { get_input: aws_agent_username }
        key: { get_input: aws_agent_local_path_to_key_file }
        port: { get_input: aws_agent_port }
      use_external_resource: { get_input: use_existing_mongodb_aws_virtual_machine }
      resource_id: { get_input: mongodb_aws_virtual_machine }
      image_id: { get_input: mongodb_aws_virtual_machine_image_id }
      instance_type: { get_input: mongodb_aws_virtual_machine_instance_type }
      parameters:
        placement: { get_property: [ example_aws_private_subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: example_aws_private_subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: aws_mongodb_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: example_aws_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: example_aws_key

  nodejs_aws_virtual_machine:
    type: cloudify.aws.nodes.Instance
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: nodejs_aws_instances }
    properties:
      aws_config: { get_input: aws_configuration }
      agent_config:
        install_method: none
        user: { get_input: aws_agent_username }
        key: { get_input: aws_agent_local_path_to_key_file }
        port: { get_input: aws_agent_port }
      use_external_resource: { get_input: use_existing_nodejs_aws_virtual_machine }
      resource_id: { get_input: nodejs_aws_virtual_machine }
      image_id: { get_input: nodejs_aws_virtual_machine_image_id }
      instance_type: { get_input: nodejs_aws_virtual_machine_instance_type }
      parameters:
        placement: { get_property: [ example_aws_private_subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: example_aws_private_subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: aws_nodejs_security_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: example_aws_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: example_aws_key
